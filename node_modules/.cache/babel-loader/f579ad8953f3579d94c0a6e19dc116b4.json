{"ast":null,"code":"'use strict'; // modified from accounting.js\n\nfunction parseNum(value, decimalSep) {\n  if (value == null) return NaN;\n  decimalSep = decimalSep || '.'; // Return the value as-is if it's already a number:\n\n  if (typeof value === 'number') return value; // build regex to strip out everything except digits, decimal point and minus sign:\n\n  var regex = new RegExp('[^0-9-' + decimalSep + ']', ['g']);\n  var unformatted = value.toString(); // explicitly convert to string\n\n  unformatted = unformatted // .replace(/\\((.*)\\)/, '-$1') // replace bracketed values with negatives\n  .replace(regex, '') // strip out any cruft\n  .replace(decimalSep, '.'); // make sure decimal point is standard\n\n  unformatted = parseFloat(unformatted);\n  return unformatted;\n}\n\nmodule.exports = parseNum;","map":{"version":3,"sources":["/home/amit/Documents/amit project/video product/video-product/node_modules/parse-num/index.js"],"names":["parseNum","value","decimalSep","NaN","regex","RegExp","unformatted","toString","replace","parseFloat","module","exports"],"mappings":"AAAA,a,CAEA;;AACA,SAASA,QAAT,CAAmBC,KAAnB,EAA0BC,UAA1B,EAAsC;AACpC,MAAID,KAAK,IAAI,IAAb,EAAmB,OAAOE,GAAP;AACnBD,EAAAA,UAAU,GAAGA,UAAU,IAAI,GAA3B,CAFoC,CAIpC;;AACA,MAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B,OAAOA,KAAP,CALK,CAOpC;;AACA,MAAIG,KAAK,GAAG,IAAIC,MAAJ,CAAW,WAAWH,UAAX,GAAwB,GAAnC,EAAwC,CAAC,GAAD,CAAxC,CAAZ;AACA,MAAII,WAAW,GAAGL,KAAK,CAACM,QAAN,EAAlB,CAToC,CASD;;AACnCD,EAAAA,WAAW,GAAGA,WAAW,CACvB;AADuB,GAExBE,OAFa,CAELJ,KAFK,EAEE,EAFF,EAEc;AAFd,GAGXI,OAHW,CAGHN,UAHG,EAGS,GAHT,CAAd,CAVoC,CAaN;;AAE9BI,EAAAA,WAAW,GAAGG,UAAU,CAACH,WAAD,CAAxB;AAEA,SAAOA,WAAP;AACD;;AAEDI,MAAM,CAACC,OAAP,GAAiBX,QAAjB","sourcesContent":["'use strict'\n\n// modified from accounting.js\nfunction parseNum (value, decimalSep) {\n  if (value == null) return NaN\n  decimalSep = decimalSep || '.'\n\n  // Return the value as-is if it's already a number:\n  if (typeof value === 'number') return value\n\n  // build regex to strip out everything except digits, decimal point and minus sign:\n  var regex = new RegExp('[^0-9-' + decimalSep + ']', ['g'])\n  var unformatted = value.toString() // explicitly convert to string\n  unformatted = unformatted\n    // .replace(/\\((.*)\\)/, '-$1') // replace bracketed values with negatives\n\t\t.replace(regex, '')         // strip out any cruft\n    .replace(decimalSep, '.')   // make sure decimal point is standard\n\n  unformatted = parseFloat(unformatted)\n\n  return unformatted\n}\n\nmodule.exports = parseNum\n"]},"metadata":{},"sourceType":"script"}