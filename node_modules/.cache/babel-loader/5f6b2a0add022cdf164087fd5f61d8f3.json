{"ast":null,"code":"const parseNum = require('parse-num');\n/* global Intl */\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat\n\n\nconst defaultOptions = {\n  nanZero: true,\n  locale: 'en-US',\n  localeMatcher: 'best fit',\n  useGrouping: true,\n  // grouping separator determined by locale\n  maximumFractionDigits: 15 // OTHER\n  // minimumIntegerDigits\n  // minimumFractionDigits\n  // maximumFractionDigits\n  // minimumSignificantDigits\n  // maximumSignificantDigits\n\n};\n\nfunction formatNum(number, opts) {\n  opts = renameKeyShortcuts(Object.assign({}, defaultOptions, opts));\n  number = parseNum(number);\n\n  if (isNaN(number)) {\n    if (opts.nanZero === false) return 'NaN';else number = 0;\n  }\n\n  const nf = new Intl.NumberFormat([opts.locale], Object.assign({}, opts, {\n    style: 'decimal'\n  }));\n  return nf.format(number);\n}\n\nfunction renameKeyShortcuts(opts) {\n  // expand 'min' to 'minimum', 'max' to 'maximum'\n  Object.keys(opts).forEach(function (key) {\n    if (!key.includes('minimum') && key.startsWith('min')) {\n      opts[key.replace('min', 'minimum')] = opts[key];\n      delete opts[key];\n    }\n\n    if (!key.includes('maximum') && key.startsWith('max')) {\n      opts[key.replace('max', 'maximum')] = opts[key];\n      delete opts[key];\n    }\n  });\n  Object.keys(opts).forEach(function (key) {\n    if (key.startsWith('minimum') && !key.endsWith('Digits')) {\n      opts[key + 'Digits'] = opts[key];\n      delete opts[key];\n    }\n\n    if (key.startsWith('maximum') && !key.endsWith('Digits')) {\n      opts[key + 'Digits'] = opts[key];\n      delete opts[key];\n    }\n  });\n  return opts;\n}\n\nmodule.exports = formatNum;","map":{"version":3,"sources":["/home/amit/Documents/amit project/video product/video-product/node_modules/format-num/index.js"],"names":["parseNum","require","defaultOptions","nanZero","locale","localeMatcher","useGrouping","maximumFractionDigits","formatNum","number","opts","renameKeyShortcuts","Object","assign","isNaN","nf","Intl","NumberFormat","style","format","keys","forEach","key","includes","startsWith","replace","endsWith","module","exports"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAxB;AAEA;AAEA;;;AACA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,OAAO,EAAE,IADY;AAErBC,EAAAA,MAAM,EAAE,OAFa;AAGrBC,EAAAA,aAAa,EAAE,UAHM;AAIrBC,EAAAA,WAAW,EAAE,IAJQ;AAIF;AACnBC,EAAAA,qBAAqB,EAAE,EALF,CAMrB;AACA;AACA;AACA;AACA;AACA;;AAXqB,CAAvB;;AAcA,SAASC,SAAT,CAAoBC,MAApB,EAA4BC,IAA5B,EAAkC;AAChCA,EAAAA,IAAI,GAAGC,kBAAkB,CAACC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBX,cAAlB,EAAkCQ,IAAlC,CAAD,CAAzB;AACAD,EAAAA,MAAM,GAAGT,QAAQ,CAACS,MAAD,CAAjB;;AAEA,MAAIK,KAAK,CAACL,MAAD,CAAT,EAAmB;AACjB,QAAIC,IAAI,CAACP,OAAL,KAAiB,KAArB,EAA4B,OAAO,KAAP,CAA5B,KACKM,MAAM,GAAG,CAAT;AACN;;AAED,QAAMM,EAAE,GAAG,IAAIC,IAAI,CAACC,YAAT,CAAsB,CAACP,IAAI,CAACN,MAAN,CAAtB,EAAqCQ,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,IAAlB,EAAwB;AAAEQ,IAAAA,KAAK,EAAE;AAAT,GAAxB,CAArC,CAAX;AACA,SAAOH,EAAE,CAACI,MAAH,CAAUV,MAAV,CAAP;AACD;;AAED,SAASE,kBAAT,CAA6BD,IAA7B,EAAmC;AACjC;AACAE,EAAAA,MAAM,CAACQ,IAAP,CAAYV,IAAZ,EAAkBW,OAAlB,CAA0B,UAAUC,GAAV,EAAe;AACvC,QAAI,CAACA,GAAG,CAACC,QAAJ,CAAa,SAAb,CAAD,IAA4BD,GAAG,CAACE,UAAJ,CAAe,KAAf,CAAhC,EAAuD;AACrDd,MAAAA,IAAI,CAACY,GAAG,CAACG,OAAJ,CAAY,KAAZ,EAAmB,SAAnB,CAAD,CAAJ,GAAsCf,IAAI,CAACY,GAAD,CAA1C;AACA,aAAOZ,IAAI,CAACY,GAAD,CAAX;AACD;;AAED,QAAI,CAACA,GAAG,CAACC,QAAJ,CAAa,SAAb,CAAD,IAA4BD,GAAG,CAACE,UAAJ,CAAe,KAAf,CAAhC,EAAuD;AACrDd,MAAAA,IAAI,CAACY,GAAG,CAACG,OAAJ,CAAY,KAAZ,EAAmB,SAAnB,CAAD,CAAJ,GAAsCf,IAAI,CAACY,GAAD,CAA1C;AACA,aAAOZ,IAAI,CAACY,GAAD,CAAX;AACD;AACF,GAVD;AAYAV,EAAAA,MAAM,CAACQ,IAAP,CAAYV,IAAZ,EAAkBW,OAAlB,CAA0B,UAAUC,GAAV,EAAe;AACvC,QAAIA,GAAG,CAACE,UAAJ,CAAe,SAAf,KAA6B,CAACF,GAAG,CAACI,QAAJ,CAAa,QAAb,CAAlC,EAA0D;AACxDhB,MAAAA,IAAI,CAACY,GAAG,GAAG,QAAP,CAAJ,GAAuBZ,IAAI,CAACY,GAAD,CAA3B;AACA,aAAOZ,IAAI,CAACY,GAAD,CAAX;AACD;;AAED,QAAIA,GAAG,CAACE,UAAJ,CAAe,SAAf,KAA6B,CAACF,GAAG,CAACI,QAAJ,CAAa,QAAb,CAAlC,EAA0D;AACxDhB,MAAAA,IAAI,CAACY,GAAG,GAAG,QAAP,CAAJ,GAAuBZ,IAAI,CAACY,GAAD,CAA3B;AACA,aAAOZ,IAAI,CAACY,GAAD,CAAX;AACD;AACF,GAVD;AAYA,SAAOZ,IAAP;AACD;;AAEDiB,MAAM,CAACC,OAAP,GAAiBpB,SAAjB","sourcesContent":["const parseNum = require('parse-num')\n\n/* global Intl */\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat\nconst defaultOptions = {\n  nanZero: true,\n  locale: 'en-US',\n  localeMatcher: 'best fit',\n  useGrouping: true, // grouping separator determined by locale\n  maximumFractionDigits: 15\n  // OTHER\n  // minimumIntegerDigits\n  // minimumFractionDigits\n  // maximumFractionDigits\n  // minimumSignificantDigits\n  // maximumSignificantDigits\n}\n\nfunction formatNum (number, opts) {\n  opts = renameKeyShortcuts(Object.assign({}, defaultOptions, opts))\n  number = parseNum(number)\n\n  if (isNaN(number)) {\n    if (opts.nanZero === false) return 'NaN'\n    else number = 0\n  }\n\n  const nf = new Intl.NumberFormat([opts.locale], Object.assign({}, opts, { style: 'decimal' }))\n  return nf.format(number)\n}\n\nfunction renameKeyShortcuts (opts) {\n  // expand 'min' to 'minimum', 'max' to 'maximum'\n  Object.keys(opts).forEach(function (key) {\n    if (!key.includes('minimum') && key.startsWith('min')) {\n      opts[key.replace('min', 'minimum')] = opts[key]\n      delete opts[key]\n    }\n\n    if (!key.includes('maximum') && key.startsWith('max')) {\n      opts[key.replace('max', 'maximum')] = opts[key]\n      delete opts[key]\n    }\n  })\n\n  Object.keys(opts).forEach(function (key) {\n    if (key.startsWith('minimum') && !key.endsWith('Digits')) {\n      opts[key + 'Digits'] = opts[key]\n      delete opts[key]\n    }\n\n    if (key.startsWith('maximum') && !key.endsWith('Digits')) {\n      opts[key + 'Digits'] = opts[key]\n      delete opts[key]\n    }\n  })\n\n  return opts\n}\n\nmodule.exports = formatNum\n"]},"metadata":{},"sourceType":"script"}